name: Release

on:
  workflow_dispatch:
    inputs:
      version_number:
        description: 'Version number (es. 1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Validate version format
      run: |
        if [[ ! "${{ inputs.version_number }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format. Use semantic versioning: x.y.z (es. 1.0.0)"
          exit 1
        fi
        echo "✅ Version format validated: ${{ inputs.version_number }}"
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Update version in code
      run: |
        sed -i 's/var Version = ".*"/var Version = "${{ inputs.version_number }}"/' main.go
        sed -i 's/VERSION=".*"/VERSION="${{ inputs.version_number }}"/' build.sh
        sed -i 's/\$Version = ".*"/\$Version = "${{ inputs.version_number }}"/' build.ps1
    
    - name: Build for multiple platforms
      run: |
        VERSION="${{ inputs.version_number }}"
        
        # Linux
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-linux-amd64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-linux-arm64
        
        # macOS
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-darwin-amd64
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-darwin-arm64
        
        # Windows
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-windows-amd64.exe
    
    - name: Create checksums
      run: |
        sha256sum burnmail-linux-amd64 > checksums.txt
        sha256sum burnmail-linux-arm64 >> checksums.txt
        sha256sum burnmail-darwin-amd64 >> checksums.txt
        sha256sum burnmail-darwin-arm64 >> checksums.txt
        sha256sum burnmail-windows-amd64.exe >> checksums.txt
    
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add main.go build.sh build.ps1
        git commit -m "chore: bump version to ${{ inputs.version_number }}"
        git push origin main
    
    - name: Create and push tag
      run: |
        TAG_NAME="v${{ inputs.version_number }}"
        echo "Creating tag: $TAG_NAME"
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
        git push origin "$TAG_NAME"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ inputs.version_number }}
        name: "Burnmail v${{ inputs.version_number }}"
        body: |
          ## 🔥 Burnmail v${{ inputs.version_number }}
          
          ### Changes
          - Automated release build
          
          ### 📦 Installation
          
          #### Linux (amd64)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-linux-amd64
          chmod +x burnmail-linux-amd64
          sudo mv burnmail-linux-amd64 /usr/local/bin/burnmail
          ```
          
          #### Linux (arm64)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-linux-arm64
          chmod +x burnmail-linux-arm64
          sudo mv burnmail-linux-arm64 /usr/local/bin/burnmail
          ```
          
          #### macOS (Apple Silicon - M1/M2/M3)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-darwin-arm64 -o burnmail
          chmod +x burnmail
          sudo mv burnmail /usr/local/bin/
          ```
          
          #### macOS (Intel)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-darwin-amd64 -o burnmail
          chmod +x burnmail
          sudo mv burnmail /usr/local/bin/
          ```
          
          #### Windows (PowerShell)
          ```powershell
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-windows-amd64.exe" -OutFile "burnmail.exe"
          ```
          
          #### Using Go
          ```bash
          go install github.com/${{ github.repository }}@v${{ inputs.version_number }}
          ```
          
          ### ✅ Verify Installation
          
          After installation, verify with:
          ```bash
          burnmail v
          ```
          
          ### 🔒 Verify Checksums
          
          Download `checksums.txt` and verify:
          ```bash
          sha256sum -c checksums.txt
          ```
        files: |
          burnmail-linux-amd64
          burnmail-linux-arm64
          burnmail-darwin-amd64
          burnmail-darwin-arm64
          burnmail-windows-amd64.exe
          checksums.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Release summary
      run: |
        echo "## 🎉 Release Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** v${{ inputs.version_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** [v${{ inputs.version_number }}](https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version_number }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Downloads:" >> $GITHUB_STEP_SUMMARY
        echo "- [Linux amd64](https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-linux-amd64)" >> $GITHUB_STEP_SUMMARY
        echo "- [Linux arm64](https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-linux-arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- [macOS Intel](https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-darwin-amd64)" >> $GITHUB_STEP_SUMMARY
        echo "- [macOS Apple Silicon](https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-darwin-arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- [Windows](https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/burnmail-windows-amd64.exe)" >> $GITHUB_STEP_SUMMARY
        echo "- [Checksums](https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/checksums.txt)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Verify Installation:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "burnmail v" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
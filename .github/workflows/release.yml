name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare Release PR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: false

    - name: Validate version format
      run: |
        if ! [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format X.Y.Z"
          exit 1
        fi

    - name: Check if tag exists
      run: |
        if git rev-parse "v${{ inputs.version }}" >/dev/null 2>&1; then
          echo "Error: Tag v${{ inputs.version }} already exists"
          exit 1
        fi

    - name: Run tests
      run: go test -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Generate changelog
      id: changelog
      run: |
        echo "Generating changelog..."
        
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          echo "First release - including all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Generating changelog since $LATEST_TAG"
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        {
          echo 'changelog<<EOF'
          echo "$CHANGELOG"
          echo EOF
        } >> $GITHUB_OUTPUT

    - name: Create release branch and update version
      env:
        BRANCH_NAME: release/v${{ inputs.version }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        git checkout -b "$BRANCH_NAME"
        
        # Update version in code
        sed -i 's/var Version = ".*"/var Version = "${{ inputs.version }}"/' main.go
        sed -i 's/VERSION=".*"/VERSION="${{ inputs.version }}"/' build.sh
        sed -i 's/\$Version = ".*"/\$Version = "${{ inputs.version }}"/' build.ps1
        
        # Commit and push
        git add main.go build.sh build.ps1
        git commit -m "chore: bump version to ${{ inputs.version }}"
        git push -f -u origin "$BRANCH_NAME"

    - name: Create labels if they don't exist
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh label create release --description "Release PR" --color "0e8a16" --force || true
        gh label create patch --description "Patch release" --color "d4c5f9" --force || true
        gh label create minor --description "Minor release" --color "c5def5" --force || true
        gh label create major --description "Major release" --color "d93f0b" --force || true

    - name: Create Pull Request
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH_NAME: release/v${{ inputs.version }}
      run: |
        existing_pr=$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number' || echo "")

        if [ -n "$existing_pr" ]; then
          echo "PR #$existing_pr already exists, skipping creation"
          exit 0
        fi

        gh pr create \
          --title "ðŸš€ Release v${{ inputs.version }}" \
          --body "## ðŸ”¥ Release v${{ inputs.version }}

        This PR prepares the release for version **v${{ inputs.version }}**.

        ### ðŸ“‹ Changes in this release

        ${{ steps.changelog.outputs.changelog }}

        ### âœ… Checklist

        - [x] Tests passed
        - [x] Version updated in code
        - [x] Changelog generated

        ### ðŸŽ¯ Next Steps

        1. Review the changes
        2. Merge this PR
        3. The release will be automatically created after merge

        ---

        **Release Type**: ${{ inputs.release_type }}

        ðŸ¤– Auto-generated by GitHub Actions" \
          --base main \
          --head "$BRANCH_NAME" \
          --label "release" \
          --label "${{ inputs.release_type }}" \
          --assignee "${{ github.actor }}"

name: Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${{ github.event.pull_request.head.ref }}"
          VERSION="${VERSION#release/v}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Generate changelog
      id: changelog
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          echo "First release - including all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Generating changelog since $LATEST_TAG"
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        {
          echo 'changelog<<EOF'
          echo "$CHANGELOG"
          echo EOF
        } >> $GITHUB_OUTPUT

    - name: Build for multiple platforms
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Linux
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-linux-amd64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-linux-arm64
        
        # macOS
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-darwin-amd64
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-darwin-arm64
        
        # Windows
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.Version=$VERSION" -o burnmail-windows-amd64.exe

    - name: Create checksums
      run: |
        sha256sum burnmail-linux-amd64 > checksums.txt
        sha256sum burnmail-linux-arm64 >> checksums.txt
        sha256sum burnmail-darwin-amd64 >> checksums.txt
        sha256sum burnmail-darwin-arm64 >> checksums.txt
        sha256sum burnmail-windows-amd64.exe >> checksums.txt

    - name: Create and push tag
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: "Burnmail v${{ steps.version.outputs.version }}"
        body: |
          # ðŸ”¥ Burnmail v${{ steps.version.outputs.version }}
          
          ## What's Changed
          
          ${{ steps.changelog.outputs.changelog }}
          
          ---
          
          ## ðŸ“¦ Installation
          
          ### Linux (amd64)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/burnmail-linux-amd64
          chmod +x burnmail-linux-amd64
          sudo mv burnmail-linux-amd64 /usr/local/bin/burnmail
          ```
          
          ### Linux (arm64)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/burnmail-linux-arm64
          chmod +x burnmail-linux-arm64
          sudo mv burnmail-linux-arm64 /usr/local/bin/burnmail
          ```
          
          ### macOS (Apple Silicon - M1/M2/M3)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/burnmail-darwin-arm64 -o burnmail
          chmod +x burnmail
          sudo mv burnmail /usr/local/bin/
          ```
          
          ### macOS (Intel)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/burnmail-darwin-amd64 -o burnmail
          chmod +x burnmail
          sudo mv burnmail /usr/local/bin/
          ```
          
          ### Windows (PowerShell)
          ```powershell
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/burnmail-windows-amd64.exe" -OutFile "burnmail.exe"
          # Move to a directory in your PATH or add current directory to PATH
          ```
          
          ### Using Go
          ```bash
          go install github.com/${{ github.repository }}@v${{ steps.version.outputs.version }}
          ```
          
          ## âœ… Verify Installation
          
          After installation, verify with:
          ```bash
          burnmail --version
          ```
          
          ## ðŸ”’ Verify Checksums
          
          Download `checksums.txt` and verify:
          ```bash
          sha256sum -c checksums.txt
          ```
        files: |
          burnmail-linux-amd64
          burnmail-linux-arm64
          burnmail-darwin-amd64
          burnmail-darwin-arm64
          burnmail-windows-amd64.exe
          checksums.txt
        draft: false
        prerelease: false

    - name: Delete release branch
      if: success()
      run: |
        git push origin --delete release/v${{ steps.version.outputs.version }}
